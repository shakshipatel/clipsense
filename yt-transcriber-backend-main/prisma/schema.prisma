// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                             String                           @id @default(cuid())
  email                          String                           @unique
  first_name                     String
  last_name                      String?
  password                       String?
  provider                       String                           @default("email")
  verified                       Boolean                          @default(false)
  verification_code              String
  image_url                      String?
  createdAt                      DateTime                         @default(now())
  updatedAt                      DateTime                         @updatedAt
  UserToken                      UserToken?
  YoutubeTranscriptionUserHybrid YoutubeTranscriptionUserHybrid[]
}

model UserToken {
  id                 String   @id @default(cuid())
  token              String?
  googleRefreshToken String?
  googleAccessToken  String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user_id            String   @unique
  user               User     @relation(fields: [user_id], references: [id])
}

model YoutubeTranscription {
  id                             String                           @id @default(cuid())
  videoId                        String                           @unique
  imageGenerationPrompt          String
  detailedAnalysis               String
  summary                        String
  finalThought                   String
  Sentiment                      Sentiment?
  Hashtags                       Hashtags[]
  Keywords                       Keywords[]
  YoutubeTranscriptionUserHybrid YoutubeTranscriptionUserHybrid[]
}

model Sentiment {
  id                   String               @id @default(cuid())
  yt_id                String               @unique
  youtubeTranscription YoutubeTranscription @relation(fields: [yt_id], references: [id])
  overallSentiment     String
  positive             Float
  neutral              Float
  negative             Float
}

model Hashtags {
  id                   String               @id @default(cuid())
  yt_id                String
  hashtag              String
  youtubeTranscription YoutubeTranscription @relation(fields: [yt_id], references: [id])
}

model Keywords {
  id                   String               @id @default(cuid())
  yt_id                String
  youtubeTranscription YoutubeTranscription @relation(fields: [yt_id], references: [id])
  key                  String
  surrounding_text     String
  definition           String
}

model YoutubeTranscriptionUserHybrid {
  id                   String               @id @default(cuid())
  yt_id                String
  user_id              String
  name                 String               @default(cuid())
  views                Int                  @default(0)
  youtubeTranscription YoutubeTranscription @relation(fields: [yt_id], references: [id])
  user                 User                 @relation(fields: [user_id], references: [id])
}
